# Arbiter Multi-Endpoint Configuration Example
# This example shows how to configure Arbiter to use different Mac Minis for each model

# Legacy configuration (kept for backward compatibility)
model = "arbiter"
server = "http://localhost:11434"
context_size = 8192
temperature = 0.7
max_tokens = 4096

# Model orchestration configuration
[orchestration]
enabled = true
max_iterations = 10
context_compression_threshold = 6000
model_switch_cooldown_ms = 500

# Arbiter model configuration (Mac Mini #1)
[orchestration.arbiter_model]
name = "arbiter"
temperature = 0.7
description = "Reasoning and planning model for complex tasks"
server = "http://192.168.1.100:11434"  # Mac Mini #1 IP address
enabled = true

# Winchester model configuration (Mac Mini #2)
[orchestration.winchester_model]
name = "winchester"
temperature = 0.15
description = "Execution and coding model for precise implementation"
server = "http://192.168.1.101:11434"  # Mac Mini #2 IP address
enabled = true

# Language Server Protocol configurations
[[lsp_servers]]
language = "rust"
command = "rust-analyzer"
args = []

[[lsp_servers]]
language = "python"
command = "pylsp"
args = []

[[lsp_servers]]
language = "javascript"
command = "typescript-language-server"
args = ["--stdio"]

[[lsp_servers]]
language = "typescript"
command = "typescript-language-server"
args = ["--stdio"]

[[lsp_servers]]
language = "go"
command = "gopls"
args = []

[[lsp_servers]]
language = "java"
command = "jdtls"
args = []

[[lsp_servers]]
language = "c"
command = "clangd"
args = []

[[lsp_servers]]
language = "cpp"
command = "clangd"
args = []

[[lsp_servers]]
language = "csharp"
command = "omnisharp"
args = ["--languageserver"]

[[lsp_servers]]
language = "zig"
command = "zls"
args = []